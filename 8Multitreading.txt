*************************************assgn 8*************************

Write a Java Program, where you have to make two threads.
One thread reads a number from standard input and another thread prints the factorial of that given number.
Both the outputs should alternate each other.

Sample test cases:

Input:
5
Output:
120

*********************************************************************************

import java.io.*;
import java.io.*;
import java.util.*;
 class Source {
    static Object lock = new Object();
    static int i;
    public static int getI() {
        return i;
    }
    public static void setI(int i) {
        Source.i = i;
    }
    public static void main(String[] args) {
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                // complete this function!
                synchronized (lock) {
                    Scanner scanner = new Scanner(System.in);
                    
                    int t = scanner.nextInt();
                    scanner.close();
                    setI(t);    
                }
            }
        });
        Thread t2 = new Thread(new Runnable() {
            public void run() {
                // complete this function!
                synchronized (lock) {int a=getI();
                int c=1;
                for(i=2;i<=a;i++){
                c=c*i;
                }
                System.out.println(c);
                }
            }
        });
        try {
            t1.start();
            t2.start();
            t1.join();
            t2.join();
        } catch (Exception e) {
            System.out.println("An exception has occured!");
        }
    }
}
import java.io.*;
import java.util.*;
 class Source {
    static Object lock = new Object();
    static int i;
    public static int getI() {
        return i;
    }
    public static void setI(int i) {
        Source.i = i;
    }
    public static void main(String[] args) {
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                // complete this function!
                synchronized (lock) {
                    Scanner scanner = new Scanner(System.in);
                    
                    int t = scanner.nextInt();
                    scanner.close();
                    setI(t);    
                }
            }
        });
        Thread t2 = new Thread(new Runnable() {
            public void run() {
                // complete this function!
                synchronized (lock) {int a=getI();
                int c=1;
                for(i=2;i<=a;i++){
                c=c*i;
                }
                System.out.println(c);
                }
            }
        });
        try {
            t1.start();
            t2.start();
            t1.join();
            t2.join();
        } catch (Exception e) {
            System.out.println("An exception has occured!");
        }
    }
}
